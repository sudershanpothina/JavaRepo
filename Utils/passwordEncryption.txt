compile('commons-codec:commons-codec:1.9')


public class PasswordEncryption {
/*    public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {
        //String decryptPassword = decryptPassword("Kqadmy961FUAqv/UiWzkdA==", "ZGhwNzdzZWNyZXQ4MmtleQ==");
        //System.out.println(decryptPassword);
        String encryptPassword = encryptPassword("", "ZGhwNzdzZWNyZXQ4MmtleQ==");
        System.out.println(encryptPassword);
    }*/

    public static String decryptPassword(String encryptedPass, String userKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {
        String decryptedPass = null;
        byte[] decryptedByte = null;
        String userKeyPlainText = new String(Base64.decodeBase64(userKey.getBytes()));
        Key aesKey = new SecretKeySpec(userKeyPlainText.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance("AES");

        cipher.init(Cipher.DECRYPT_MODE, aesKey);
        decryptedByte = cipher.doFinal(Base64.decodeBase64(encryptedPass.getBytes()));
        decryptedPass = new String(decryptedByte, "UTF-8");

        return decryptedPass;
    }

    public static String encryptPassword(String passwordPlainText, String userKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        byte[] encryptPasswordByte = null;
        String encryptedPassword = null;
        String userKeyPlainText = new String(Base64.decodeBase64(userKey.getBytes()));

        Key aesKey = new SecretKeySpec(userKeyPlainText.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance("AES");

        cipher.init(Cipher.ENCRYPT_MODE, aesKey);
        encryptPasswordByte = cipher.doFinal(passwordPlainText.getBytes());
        encryptedPassword = Base64.encodeBase64String(encryptPasswordByte);

        return encryptedPassword;
    }

}
